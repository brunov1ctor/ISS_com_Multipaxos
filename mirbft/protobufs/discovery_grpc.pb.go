// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protobufs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DiscoveryClient is the client API for Discovery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DiscoveryClient interface {
	// Discovers the identities of other peers.
	// Every new peer invokes RegisterPeer at startup.
	// When the server (knowing the number of nodes to wait for) receives
	// all requests, it responds to each peer with the list of
	// identities generated for each peer and a newly assigned peer id.
	RegisterPeer(ctx context.Context, in *RegisterPeerRequest, opts ...grpc.CallOption) (*RegisterPeerResponse, error)
	// Synchronizes the current peers.
	// When a peer initializes connections with other peers, it invokes the SyncPeer RPC.
	// Similarly to RegisterPeer, the RPC returns when all peers have invoked SyncPeer, releasing them simultaneously.
	SyncPeer(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncResponse, error)
	// Registers a client of the ordering system.
	// Returns the identities of all ordering peers (i.e. nodes executing the ordering protocol)
	// and a newly assigned client ID.
	RegisterClient(ctx context.Context, in *RegisterClientRequest, opts ...grpc.CallOption) (*RegisterClientResponse, error)
	// Called by the slave to ask the master (server) for the next command to execute.
	NextCommand(ctx context.Context, in *SlaveStatus, opts ...grpc.CallOption) (*MasterCommand, error)
}

type discoveryClient struct {
	cc grpc.ClientConnInterface
}

func NewDiscoveryClient(cc grpc.ClientConnInterface) DiscoveryClient {
	return &discoveryClient{cc}
}

func (c *discoveryClient) RegisterPeer(ctx context.Context, in *RegisterPeerRequest, opts ...grpc.CallOption) (*RegisterPeerResponse, error) {
	out := new(RegisterPeerResponse)
	err := c.cc.Invoke(ctx, "/protobufs.Discovery/RegisterPeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discoveryClient) SyncPeer(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncResponse, error) {
	out := new(SyncResponse)
	err := c.cc.Invoke(ctx, "/protobufs.Discovery/SyncPeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discoveryClient) RegisterClient(ctx context.Context, in *RegisterClientRequest, opts ...grpc.CallOption) (*RegisterClientResponse, error) {
	out := new(RegisterClientResponse)
	err := c.cc.Invoke(ctx, "/protobufs.Discovery/RegisterClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discoveryClient) NextCommand(ctx context.Context, in *SlaveStatus, opts ...grpc.CallOption) (*MasterCommand, error) {
	out := new(MasterCommand)
	err := c.cc.Invoke(ctx, "/protobufs.Discovery/NextCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DiscoveryServer is the server API for Discovery service.
// All implementations must embed UnimplementedDiscoveryServer
// for forward compatibility
type DiscoveryServer interface {
	// Discovers the identities of other peers.
	// Every new peer invokes RegisterPeer at startup.
	// When the server (knowing the number of nodes to wait for) receives
	// all requests, it responds to each peer with the list of
	// identities generated for each peer and a newly assigned peer id.
	RegisterPeer(context.Context, *RegisterPeerRequest) (*RegisterPeerResponse, error)
	// Synchronizes the current peers.
	// When a peer initializes connections with other peers, it invokes the SyncPeer RPC.
	// Similarly to RegisterPeer, the RPC returns when all peers have invoked SyncPeer, releasing them simultaneously.
	SyncPeer(context.Context, *SyncRequest) (*SyncResponse, error)
	// Registers a client of the ordering system.
	// Returns the identities of all ordering peers (i.e. nodes executing the ordering protocol)
	// and a newly assigned client ID.
	RegisterClient(context.Context, *RegisterClientRequest) (*RegisterClientResponse, error)
	// Called by the slave to ask the master (server) for the next command to execute.
	NextCommand(context.Context, *SlaveStatus) (*MasterCommand, error)
	mustEmbedUnimplementedDiscoveryServer()
}

// UnimplementedDiscoveryServer must be embedded to have forward compatible implementations.
type UnimplementedDiscoveryServer struct {
}

func (UnimplementedDiscoveryServer) RegisterPeer(context.Context, *RegisterPeerRequest) (*RegisterPeerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterPeer not implemented")
}
func (UnimplementedDiscoveryServer) SyncPeer(context.Context, *SyncRequest) (*SyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncPeer not implemented")
}
func (UnimplementedDiscoveryServer) RegisterClient(context.Context, *RegisterClientRequest) (*RegisterClientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterClient not implemented")
}
func (UnimplementedDiscoveryServer) NextCommand(context.Context, *SlaveStatus) (*MasterCommand, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NextCommand not implemented")
}
func (UnimplementedDiscoveryServer) mustEmbedUnimplementedDiscoveryServer() {}

// UnsafeDiscoveryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DiscoveryServer will
// result in compilation errors.
type UnsafeDiscoveryServer interface {
	mustEmbedUnimplementedDiscoveryServer()
}

func RegisterDiscoveryServer(s grpc.ServiceRegistrar, srv DiscoveryServer) {
	s.RegisterService(&Discovery_ServiceDesc, srv)
}

func _Discovery_RegisterPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterPeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoveryServer).RegisterPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobufs.Discovery/RegisterPeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoveryServer).RegisterPeer(ctx, req.(*RegisterPeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Discovery_SyncPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoveryServer).SyncPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobufs.Discovery/SyncPeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoveryServer).SyncPeer(ctx, req.(*SyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Discovery_RegisterClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoveryServer).RegisterClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobufs.Discovery/RegisterClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoveryServer).RegisterClient(ctx, req.(*RegisterClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Discovery_NextCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SlaveStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoveryServer).NextCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobufs.Discovery/NextCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoveryServer).NextCommand(ctx, req.(*SlaveStatus))
	}
	return interceptor(ctx, in, info, handler)
}

// Discovery_ServiceDesc is the grpc.ServiceDesc for Discovery service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Discovery_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobufs.Discovery",
	HandlerType: (*DiscoveryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterPeer",
			Handler:    _Discovery_RegisterPeer_Handler,
		},
		{
			MethodName: "SyncPeer",
			Handler:    _Discovery_SyncPeer_Handler,
		},
		{
			MethodName: "RegisterClient",
			Handler:    _Discovery_RegisterClient_Handler,
		},
		{
			MethodName: "NextCommand",
			Handler:    _Discovery_NextCommand_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "discovery.proto",
}
