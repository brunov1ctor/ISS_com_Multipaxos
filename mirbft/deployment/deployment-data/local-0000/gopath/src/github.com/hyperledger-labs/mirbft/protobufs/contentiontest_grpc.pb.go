// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protobufs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ContentionTest0Client is the client API for ContentionTest0 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContentionTest0Client interface {
	TestContention0(ctx context.Context, opts ...grpc.CallOption) (ContentionTest0_TestContention0Client, error)
	Control(ctx context.Context, in *ControlCommand, opts ...grpc.CallOption) (*ControlResponse, error)
}

type contentionTest0Client struct {
	cc grpc.ClientConnInterface
}

func NewContentionTest0Client(cc grpc.ClientConnInterface) ContentionTest0Client {
	return &contentionTest0Client{cc}
}

func (c *contentionTest0Client) TestContention0(ctx context.Context, opts ...grpc.CallOption) (ContentionTest0_TestContention0Client, error) {
	stream, err := c.cc.NewStream(ctx, &ContentionTest0_ServiceDesc.Streams[0], "/protobufs.ContentionTest0/TestContention0", opts...)
	if err != nil {
		return nil, err
	}
	x := &contentionTest0TestContention0Client{stream}
	return x, nil
}

type ContentionTest0_TestContention0Client interface {
	Send(*ClientRequest) error
	Recv() (*ClientResponse, error)
	grpc.ClientStream
}

type contentionTest0TestContention0Client struct {
	grpc.ClientStream
}

func (x *contentionTest0TestContention0Client) Send(m *ClientRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *contentionTest0TestContention0Client) Recv() (*ClientResponse, error) {
	m := new(ClientResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *contentionTest0Client) Control(ctx context.Context, in *ControlCommand, opts ...grpc.CallOption) (*ControlResponse, error) {
	out := new(ControlResponse)
	err := c.cc.Invoke(ctx, "/protobufs.ContentionTest0/Control", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContentionTest0Server is the server API for ContentionTest0 service.
// All implementations must embed UnimplementedContentionTest0Server
// for forward compatibility
type ContentionTest0Server interface {
	TestContention0(ContentionTest0_TestContention0Server) error
	Control(context.Context, *ControlCommand) (*ControlResponse, error)
	mustEmbedUnimplementedContentionTest0Server()
}

// UnimplementedContentionTest0Server must be embedded to have forward compatible implementations.
type UnimplementedContentionTest0Server struct {
}

func (UnimplementedContentionTest0Server) TestContention0(ContentionTest0_TestContention0Server) error {
	return status.Errorf(codes.Unimplemented, "method TestContention0 not implemented")
}
func (UnimplementedContentionTest0Server) Control(context.Context, *ControlCommand) (*ControlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Control not implemented")
}
func (UnimplementedContentionTest0Server) mustEmbedUnimplementedContentionTest0Server() {}

// UnsafeContentionTest0Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContentionTest0Server will
// result in compilation errors.
type UnsafeContentionTest0Server interface {
	mustEmbedUnimplementedContentionTest0Server()
}

func RegisterContentionTest0Server(s grpc.ServiceRegistrar, srv ContentionTest0Server) {
	s.RegisterService(&ContentionTest0_ServiceDesc, srv)
}

func _ContentionTest0_TestContention0_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ContentionTest0Server).TestContention0(&contentionTest0TestContention0Server{stream})
}

type ContentionTest0_TestContention0Server interface {
	Send(*ClientResponse) error
	Recv() (*ClientRequest, error)
	grpc.ServerStream
}

type contentionTest0TestContention0Server struct {
	grpc.ServerStream
}

func (x *contentionTest0TestContention0Server) Send(m *ClientResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *contentionTest0TestContention0Server) Recv() (*ClientRequest, error) {
	m := new(ClientRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ContentionTest0_Control_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ControlCommand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentionTest0Server).Control(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobufs.ContentionTest0/Control",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentionTest0Server).Control(ctx, req.(*ControlCommand))
	}
	return interceptor(ctx, in, info, handler)
}

// ContentionTest0_ServiceDesc is the grpc.ServiceDesc for ContentionTest0 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContentionTest0_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobufs.ContentionTest0",
	HandlerType: (*ContentionTest0Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Control",
			Handler:    _ContentionTest0_Control_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TestContention0",
			Handler:       _ContentionTest0_TestContention0_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "contentiontest.proto",
}

// ContentionTest1Client is the client API for ContentionTest1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContentionTest1Client interface {
	TestContention1(ctx context.Context, opts ...grpc.CallOption) (ContentionTest1_TestContention1Client, error)
	Control(ctx context.Context, in *ControlCommand, opts ...grpc.CallOption) (*ControlResponse, error)
}

type contentionTest1Client struct {
	cc grpc.ClientConnInterface
}

func NewContentionTest1Client(cc grpc.ClientConnInterface) ContentionTest1Client {
	return &contentionTest1Client{cc}
}

func (c *contentionTest1Client) TestContention1(ctx context.Context, opts ...grpc.CallOption) (ContentionTest1_TestContention1Client, error) {
	stream, err := c.cc.NewStream(ctx, &ContentionTest1_ServiceDesc.Streams[0], "/protobufs.ContentionTest1/TestContention1", opts...)
	if err != nil {
		return nil, err
	}
	x := &contentionTest1TestContention1Client{stream}
	return x, nil
}

type ContentionTest1_TestContention1Client interface {
	Send(*ClientRequest) error
	Recv() (*ClientResponse, error)
	grpc.ClientStream
}

type contentionTest1TestContention1Client struct {
	grpc.ClientStream
}

func (x *contentionTest1TestContention1Client) Send(m *ClientRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *contentionTest1TestContention1Client) Recv() (*ClientResponse, error) {
	m := new(ClientResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *contentionTest1Client) Control(ctx context.Context, in *ControlCommand, opts ...grpc.CallOption) (*ControlResponse, error) {
	out := new(ControlResponse)
	err := c.cc.Invoke(ctx, "/protobufs.ContentionTest1/Control", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContentionTest1Server is the server API for ContentionTest1 service.
// All implementations must embed UnimplementedContentionTest1Server
// for forward compatibility
type ContentionTest1Server interface {
	TestContention1(ContentionTest1_TestContention1Server) error
	Control(context.Context, *ControlCommand) (*ControlResponse, error)
	mustEmbedUnimplementedContentionTest1Server()
}

// UnimplementedContentionTest1Server must be embedded to have forward compatible implementations.
type UnimplementedContentionTest1Server struct {
}

func (UnimplementedContentionTest1Server) TestContention1(ContentionTest1_TestContention1Server) error {
	return status.Errorf(codes.Unimplemented, "method TestContention1 not implemented")
}
func (UnimplementedContentionTest1Server) Control(context.Context, *ControlCommand) (*ControlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Control not implemented")
}
func (UnimplementedContentionTest1Server) mustEmbedUnimplementedContentionTest1Server() {}

// UnsafeContentionTest1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContentionTest1Server will
// result in compilation errors.
type UnsafeContentionTest1Server interface {
	mustEmbedUnimplementedContentionTest1Server()
}

func RegisterContentionTest1Server(s grpc.ServiceRegistrar, srv ContentionTest1Server) {
	s.RegisterService(&ContentionTest1_ServiceDesc, srv)
}

func _ContentionTest1_TestContention1_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ContentionTest1Server).TestContention1(&contentionTest1TestContention1Server{stream})
}

type ContentionTest1_TestContention1Server interface {
	Send(*ClientResponse) error
	Recv() (*ClientRequest, error)
	grpc.ServerStream
}

type contentionTest1TestContention1Server struct {
	grpc.ServerStream
}

func (x *contentionTest1TestContention1Server) Send(m *ClientResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *contentionTest1TestContention1Server) Recv() (*ClientRequest, error) {
	m := new(ClientRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ContentionTest1_Control_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ControlCommand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentionTest1Server).Control(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobufs.ContentionTest1/Control",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentionTest1Server).Control(ctx, req.(*ControlCommand))
	}
	return interceptor(ctx, in, info, handler)
}

// ContentionTest1_ServiceDesc is the grpc.ServiceDesc for ContentionTest1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContentionTest1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobufs.ContentionTest1",
	HandlerType: (*ContentionTest1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Control",
			Handler:    _ContentionTest1_Control_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TestContention1",
			Handler:       _ContentionTest1_TestContention1_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "contentiontest.proto",
}

// ContentionTestControlClient is the client API for ContentionTestControl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContentionTestControlClient interface {
	Control(ctx context.Context, in *ControlCommand, opts ...grpc.CallOption) (*ControlResponse, error)
}

type contentionTestControlClient struct {
	cc grpc.ClientConnInterface
}

func NewContentionTestControlClient(cc grpc.ClientConnInterface) ContentionTestControlClient {
	return &contentionTestControlClient{cc}
}

func (c *contentionTestControlClient) Control(ctx context.Context, in *ControlCommand, opts ...grpc.CallOption) (*ControlResponse, error) {
	out := new(ControlResponse)
	err := c.cc.Invoke(ctx, "/protobufs.ContentionTestControl/Control", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContentionTestControlServer is the server API for ContentionTestControl service.
// All implementations must embed UnimplementedContentionTestControlServer
// for forward compatibility
type ContentionTestControlServer interface {
	Control(context.Context, *ControlCommand) (*ControlResponse, error)
	mustEmbedUnimplementedContentionTestControlServer()
}

// UnimplementedContentionTestControlServer must be embedded to have forward compatible implementations.
type UnimplementedContentionTestControlServer struct {
}

func (UnimplementedContentionTestControlServer) Control(context.Context, *ControlCommand) (*ControlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Control not implemented")
}
func (UnimplementedContentionTestControlServer) mustEmbedUnimplementedContentionTestControlServer() {}

// UnsafeContentionTestControlServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContentionTestControlServer will
// result in compilation errors.
type UnsafeContentionTestControlServer interface {
	mustEmbedUnimplementedContentionTestControlServer()
}

func RegisterContentionTestControlServer(s grpc.ServiceRegistrar, srv ContentionTestControlServer) {
	s.RegisterService(&ContentionTestControl_ServiceDesc, srv)
}

func _ContentionTestControl_Control_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ControlCommand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentionTestControlServer).Control(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobufs.ContentionTestControl/Control",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentionTestControlServer).Control(ctx, req.(*ControlCommand))
	}
	return interceptor(ctx, in, info, handler)
}

// ContentionTestControl_ServiceDesc is the grpc.ServiceDesc for ContentionTestControl service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContentionTestControl_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobufs.ContentionTestControl",
	HandlerType: (*ContentionTestControlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Control",
			Handler:    _ContentionTestControl_Control_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "contentiontest.proto",
}
