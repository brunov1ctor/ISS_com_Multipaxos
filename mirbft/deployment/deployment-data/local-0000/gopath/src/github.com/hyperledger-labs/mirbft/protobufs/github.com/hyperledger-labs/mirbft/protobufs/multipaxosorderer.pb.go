// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        v5.27.2
// source: multipaxosorderer.proto

package protobufs

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MPxInstanceId struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sn            int32                  `protobuf:"varint,1,opt,name=sn,proto3" json:"sn,omitempty"`         // sequence number do segmento
	Bucket        int32                  `protobuf:"varint,2,opt,name=bucket,proto3" json:"bucket,omitempty"` // opcional: bucket/shard
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MPxInstanceId) Reset() {
	*x = MPxInstanceId{}
	mi := &file_multipaxosorderer_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MPxInstanceId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MPxInstanceId) ProtoMessage() {}

func (x *MPxInstanceId) ProtoReflect() protoreflect.Message {
	mi := &file_multipaxosorderer_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MPxInstanceId.ProtoReflect.Descriptor instead.
func (*MPxInstanceId) Descriptor() ([]byte, []int) {
	return file_multipaxosorderer_proto_rawDescGZIP(), []int{0}
}

func (x *MPxInstanceId) GetSn() int32 {
	if x != nil {
		return x.Sn
	}
	return 0
}

func (x *MPxInstanceId) GetBucket() int32 {
	if x != nil {
		return x.Bucket
	}
	return 0
}

type MPxValue struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *MPxInstanceId         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Batch         []byte                 `protobuf:"bytes,2,opt,name=batch,proto3" json:"batch,omitempty"`   // payload agregado
	Digest        []byte                 `protobuf:"bytes,3,opt,name=digest,proto3" json:"digest,omitempty"` // hash do batch (sha256, por exemplo)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MPxValue) Reset() {
	*x = MPxValue{}
	mi := &file_multipaxosorderer_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MPxValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MPxValue) ProtoMessage() {}

func (x *MPxValue) ProtoReflect() protoreflect.Message {
	mi := &file_multipaxosorderer_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MPxValue.ProtoReflect.Descriptor instead.
func (*MPxValue) Descriptor() ([]byte, []int) {
	return file_multipaxosorderer_proto_rawDescGZIP(), []int{1}
}

func (x *MPxValue) GetId() *MPxInstanceId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MPxValue) GetBatch() []byte {
	if x != nil {
		return x.Batch
	}
	return nil
}

func (x *MPxValue) GetDigest() []byte {
	if x != nil {
		return x.Digest
	}
	return nil
}

type MPxPrepare struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *MPxInstanceId         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Ballot        uint64                 `protobuf:"varint,2,opt,name=ballot,proto3" json:"ballot,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MPxPrepare) Reset() {
	*x = MPxPrepare{}
	mi := &file_multipaxosorderer_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MPxPrepare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MPxPrepare) ProtoMessage() {}

func (x *MPxPrepare) ProtoReflect() protoreflect.Message {
	mi := &file_multipaxosorderer_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MPxPrepare.ProtoReflect.Descriptor instead.
func (*MPxPrepare) Descriptor() ([]byte, []int) {
	return file_multipaxosorderer_proto_rawDescGZIP(), []int{2}
}

func (x *MPxPrepare) GetId() *MPxInstanceId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MPxPrepare) GetBallot() uint64 {
	if x != nil {
		return x.Ballot
	}
	return 0
}

type MPxPromise struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Id     *MPxInstanceId         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Ballot uint64                 `protobuf:"varint,2,opt,name=ballot,proto3" json:"ballot,omitempty"`
	// Se j√° tiver valor aceito
	HasAccepted   bool      `protobuf:"varint,3,opt,name=hasAccepted,proto3" json:"hasAccepted,omitempty"`
	AccBallot     uint64    `protobuf:"varint,4,opt,name=acc_ballot,json=accBallot,proto3" json:"acc_ballot,omitempty"`
	AccValue      *MPxValue `protobuf:"bytes,5,opt,name=acc_value,json=accValue,proto3" json:"acc_value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MPxPromise) Reset() {
	*x = MPxPromise{}
	mi := &file_multipaxosorderer_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MPxPromise) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MPxPromise) ProtoMessage() {}

func (x *MPxPromise) ProtoReflect() protoreflect.Message {
	mi := &file_multipaxosorderer_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MPxPromise.ProtoReflect.Descriptor instead.
func (*MPxPromise) Descriptor() ([]byte, []int) {
	return file_multipaxosorderer_proto_rawDescGZIP(), []int{3}
}

func (x *MPxPromise) GetId() *MPxInstanceId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MPxPromise) GetBallot() uint64 {
	if x != nil {
		return x.Ballot
	}
	return 0
}

func (x *MPxPromise) GetHasAccepted() bool {
	if x != nil {
		return x.HasAccepted
	}
	return false
}

func (x *MPxPromise) GetAccBallot() uint64 {
	if x != nil {
		return x.AccBallot
	}
	return 0
}

func (x *MPxPromise) GetAccValue() *MPxValue {
	if x != nil {
		return x.AccValue
	}
	return nil
}

type MPxAccept struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *MPxInstanceId         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Ballot        uint64                 `protobuf:"varint,2,opt,name=ballot,proto3" json:"ballot,omitempty"`
	Value         *MPxValue              `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MPxAccept) Reset() {
	*x = MPxAccept{}
	mi := &file_multipaxosorderer_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MPxAccept) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MPxAccept) ProtoMessage() {}

func (x *MPxAccept) ProtoReflect() protoreflect.Message {
	mi := &file_multipaxosorderer_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MPxAccept.ProtoReflect.Descriptor instead.
func (*MPxAccept) Descriptor() ([]byte, []int) {
	return file_multipaxosorderer_proto_rawDescGZIP(), []int{4}
}

func (x *MPxAccept) GetId() *MPxInstanceId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MPxAccept) GetBallot() uint64 {
	if x != nil {
		return x.Ballot
	}
	return 0
}

func (x *MPxAccept) GetValue() *MPxValue {
	if x != nil {
		return x.Value
	}
	return nil
}

type MPxAccepted struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *MPxInstanceId         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Ballot        uint64                 `protobuf:"varint,2,opt,name=ballot,proto3" json:"ballot,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MPxAccepted) Reset() {
	*x = MPxAccepted{}
	mi := &file_multipaxosorderer_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MPxAccepted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MPxAccepted) ProtoMessage() {}

func (x *MPxAccepted) ProtoReflect() protoreflect.Message {
	mi := &file_multipaxosorderer_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MPxAccepted.ProtoReflect.Descriptor instead.
func (*MPxAccepted) Descriptor() ([]byte, []int) {
	return file_multipaxosorderer_proto_rawDescGZIP(), []int{5}
}

func (x *MPxAccepted) GetId() *MPxInstanceId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MPxAccepted) GetBallot() uint64 {
	if x != nil {
		return x.Ballot
	}
	return 0
}

type MPxCommit struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *MPxInstanceId         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Value         *MPxValue              `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MPxCommit) Reset() {
	*x = MPxCommit{}
	mi := &file_multipaxosorderer_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MPxCommit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MPxCommit) ProtoMessage() {}

func (x *MPxCommit) ProtoReflect() protoreflect.Message {
	mi := &file_multipaxosorderer_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MPxCommit.ProtoReflect.Descriptor instead.
func (*MPxCommit) Descriptor() ([]byte, []int) {
	return file_multipaxosorderer_proto_rawDescGZIP(), []int{6}
}

func (x *MPxCommit) GetId() *MPxInstanceId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MPxCommit) GetValue() *MPxValue {
	if x != nil {
		return x.Value
	}
	return nil
}

type MPxMsg struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*MPxMsg_Prepare
	//	*MPxMsg_Promise
	//	*MPxMsg_Accept
	//	*MPxMsg_Accepted
	//	*MPxMsg_Commit
	Type          isMPxMsg_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MPxMsg) Reset() {
	*x = MPxMsg{}
	mi := &file_multipaxosorderer_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MPxMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MPxMsg) ProtoMessage() {}

func (x *MPxMsg) ProtoReflect() protoreflect.Message {
	mi := &file_multipaxosorderer_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MPxMsg.ProtoReflect.Descriptor instead.
func (*MPxMsg) Descriptor() ([]byte, []int) {
	return file_multipaxosorderer_proto_rawDescGZIP(), []int{7}
}

func (x *MPxMsg) GetType() isMPxMsg_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *MPxMsg) GetPrepare() *MPxPrepare {
	if x != nil {
		if x, ok := x.Type.(*MPxMsg_Prepare); ok {
			return x.Prepare
		}
	}
	return nil
}

func (x *MPxMsg) GetPromise() *MPxPromise {
	if x != nil {
		if x, ok := x.Type.(*MPxMsg_Promise); ok {
			return x.Promise
		}
	}
	return nil
}

func (x *MPxMsg) GetAccept() *MPxAccept {
	if x != nil {
		if x, ok := x.Type.(*MPxMsg_Accept); ok {
			return x.Accept
		}
	}
	return nil
}

func (x *MPxMsg) GetAccepted() *MPxAccepted {
	if x != nil {
		if x, ok := x.Type.(*MPxMsg_Accepted); ok {
			return x.Accepted
		}
	}
	return nil
}

func (x *MPxMsg) GetCommit() *MPxCommit {
	if x != nil {
		if x, ok := x.Type.(*MPxMsg_Commit); ok {
			return x.Commit
		}
	}
	return nil
}

type isMPxMsg_Type interface {
	isMPxMsg_Type()
}

type MPxMsg_Prepare struct {
	Prepare *MPxPrepare `protobuf:"bytes,10,opt,name=prepare,proto3,oneof"`
}

type MPxMsg_Promise struct {
	Promise *MPxPromise `protobuf:"bytes,11,opt,name=promise,proto3,oneof"`
}

type MPxMsg_Accept struct {
	Accept *MPxAccept `protobuf:"bytes,12,opt,name=accept,proto3,oneof"`
}

type MPxMsg_Accepted struct {
	Accepted *MPxAccepted `protobuf:"bytes,13,opt,name=accepted,proto3,oneof"`
}

type MPxMsg_Commit struct {
	Commit *MPxCommit `protobuf:"bytes,14,opt,name=commit,proto3,oneof"`
}

func (*MPxMsg_Prepare) isMPxMsg_Type() {}

func (*MPxMsg_Promise) isMPxMsg_Type() {}

func (*MPxMsg_Accept) isMPxMsg_Type() {}

func (*MPxMsg_Accepted) isMPxMsg_Type() {}

func (*MPxMsg_Commit) isMPxMsg_Type() {}

var File_multipaxosorderer_proto protoreflect.FileDescriptor

const file_multipaxosorderer_proto_rawDesc = "" +
	"\n" +
	"\x17multipaxosorderer.proto\x12\x10mirbft.protobufs\"7\n" +
	"\rMPxInstanceId\x12\x0e\n" +
	"\x02sn\x18\x01 \x01(\x05R\x02sn\x12\x16\n" +
	"\x06bucket\x18\x02 \x01(\x05R\x06bucket\"i\n" +
	"\bMPxValue\x12/\n" +
	"\x02id\x18\x01 \x01(\v2\x1f.mirbft.protobufs.MPxInstanceIdR\x02id\x12\x14\n" +
	"\x05batch\x18\x02 \x01(\fR\x05batch\x12\x16\n" +
	"\x06digest\x18\x03 \x01(\fR\x06digest\"U\n" +
	"\n" +
	"MPxPrepare\x12/\n" +
	"\x02id\x18\x01 \x01(\v2\x1f.mirbft.protobufs.MPxInstanceIdR\x02id\x12\x16\n" +
	"\x06ballot\x18\x02 \x01(\x04R\x06ballot\"\xcf\x01\n" +
	"\n" +
	"MPxPromise\x12/\n" +
	"\x02id\x18\x01 \x01(\v2\x1f.mirbft.protobufs.MPxInstanceIdR\x02id\x12\x16\n" +
	"\x06ballot\x18\x02 \x01(\x04R\x06ballot\x12 \n" +
	"\vhasAccepted\x18\x03 \x01(\bR\vhasAccepted\x12\x1d\n" +
	"\n" +
	"acc_ballot\x18\x04 \x01(\x04R\taccBallot\x127\n" +
	"\tacc_value\x18\x05 \x01(\v2\x1a.mirbft.protobufs.MPxValueR\baccValue\"\x86\x01\n" +
	"\tMPxAccept\x12/\n" +
	"\x02id\x18\x01 \x01(\v2\x1f.mirbft.protobufs.MPxInstanceIdR\x02id\x12\x16\n" +
	"\x06ballot\x18\x02 \x01(\x04R\x06ballot\x120\n" +
	"\x05value\x18\x03 \x01(\v2\x1a.mirbft.protobufs.MPxValueR\x05value\"V\n" +
	"\vMPxAccepted\x12/\n" +
	"\x02id\x18\x01 \x01(\v2\x1f.mirbft.protobufs.MPxInstanceIdR\x02id\x12\x16\n" +
	"\x06ballot\x18\x02 \x01(\x04R\x06ballot\"n\n" +
	"\tMPxCommit\x12/\n" +
	"\x02id\x18\x01 \x01(\v2\x1f.mirbft.protobufs.MPxInstanceIdR\x02id\x120\n" +
	"\x05value\x18\x02 \x01(\v2\x1a.mirbft.protobufs.MPxValueR\x05value\"\xaf\x02\n" +
	"\x06MPxMsg\x128\n" +
	"\aprepare\x18\n" +
	" \x01(\v2\x1c.mirbft.protobufs.MPxPrepareH\x00R\aprepare\x128\n" +
	"\apromise\x18\v \x01(\v2\x1c.mirbft.protobufs.MPxPromiseH\x00R\apromise\x125\n" +
	"\x06accept\x18\f \x01(\v2\x1b.mirbft.protobufs.MPxAcceptH\x00R\x06accept\x12;\n" +
	"\baccepted\x18\r \x01(\v2\x1d.mirbft.protobufs.MPxAcceptedH\x00R\baccepted\x125\n" +
	"\x06commit\x18\x0e \x01(\v2\x1b.mirbft.protobufs.MPxCommitH\x00R\x06commitB\x06\n" +
	"\x04typeB8Z6github.com/hyperledger-labs/mirbft/protobufs;protobufsb\x06proto3"

var (
	file_multipaxosorderer_proto_rawDescOnce sync.Once
	file_multipaxosorderer_proto_rawDescData []byte
)

func file_multipaxosorderer_proto_rawDescGZIP() []byte {
	file_multipaxosorderer_proto_rawDescOnce.Do(func() {
		file_multipaxosorderer_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_multipaxosorderer_proto_rawDesc), len(file_multipaxosorderer_proto_rawDesc)))
	})
	return file_multipaxosorderer_proto_rawDescData
}

var file_multipaxosorderer_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_multipaxosorderer_proto_goTypes = []any{
	(*MPxInstanceId)(nil), // 0: mirbft.protobufs.MPxInstanceId
	(*MPxValue)(nil),      // 1: mirbft.protobufs.MPxValue
	(*MPxPrepare)(nil),    // 2: mirbft.protobufs.MPxPrepare
	(*MPxPromise)(nil),    // 3: mirbft.protobufs.MPxPromise
	(*MPxAccept)(nil),     // 4: mirbft.protobufs.MPxAccept
	(*MPxAccepted)(nil),   // 5: mirbft.protobufs.MPxAccepted
	(*MPxCommit)(nil),     // 6: mirbft.protobufs.MPxCommit
	(*MPxMsg)(nil),        // 7: mirbft.protobufs.MPxMsg
}
var file_multipaxosorderer_proto_depIdxs = []int32{
	0,  // 0: mirbft.protobufs.MPxValue.id:type_name -> mirbft.protobufs.MPxInstanceId
	0,  // 1: mirbft.protobufs.MPxPrepare.id:type_name -> mirbft.protobufs.MPxInstanceId
	0,  // 2: mirbft.protobufs.MPxPromise.id:type_name -> mirbft.protobufs.MPxInstanceId
	1,  // 3: mirbft.protobufs.MPxPromise.acc_value:type_name -> mirbft.protobufs.MPxValue
	0,  // 4: mirbft.protobufs.MPxAccept.id:type_name -> mirbft.protobufs.MPxInstanceId
	1,  // 5: mirbft.protobufs.MPxAccept.value:type_name -> mirbft.protobufs.MPxValue
	0,  // 6: mirbft.protobufs.MPxAccepted.id:type_name -> mirbft.protobufs.MPxInstanceId
	0,  // 7: mirbft.protobufs.MPxCommit.id:type_name -> mirbft.protobufs.MPxInstanceId
	1,  // 8: mirbft.protobufs.MPxCommit.value:type_name -> mirbft.protobufs.MPxValue
	2,  // 9: mirbft.protobufs.MPxMsg.prepare:type_name -> mirbft.protobufs.MPxPrepare
	3,  // 10: mirbft.protobufs.MPxMsg.promise:type_name -> mirbft.protobufs.MPxPromise
	4,  // 11: mirbft.protobufs.MPxMsg.accept:type_name -> mirbft.protobufs.MPxAccept
	5,  // 12: mirbft.protobufs.MPxMsg.accepted:type_name -> mirbft.protobufs.MPxAccepted
	6,  // 13: mirbft.protobufs.MPxMsg.commit:type_name -> mirbft.protobufs.MPxCommit
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_multipaxosorderer_proto_init() }
func file_multipaxosorderer_proto_init() {
	if File_multipaxosorderer_proto != nil {
		return
	}
	file_multipaxosorderer_proto_msgTypes[7].OneofWrappers = []any{
		(*MPxMsg_Prepare)(nil),
		(*MPxMsg_Promise)(nil),
		(*MPxMsg_Accept)(nil),
		(*MPxMsg_Accepted)(nil),
		(*MPxMsg_Commit)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_multipaxosorderer_proto_rawDesc), len(file_multipaxosorderer_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_multipaxosorderer_proto_goTypes,
		DependencyIndexes: file_multipaxosorderer_proto_depIdxs,
		MessageInfos:      file_multipaxosorderer_proto_msgTypes,
	}.Build()
	File_multipaxosorderer_proto = out.File
	file_multipaxosorderer_proto_goTypes = nil
	file_multipaxosorderer_proto_depIdxs = nil
}
