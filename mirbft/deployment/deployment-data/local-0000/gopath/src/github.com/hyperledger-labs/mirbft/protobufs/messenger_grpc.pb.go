// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protobufs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MessengerClient is the client API for Messenger service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessengerClient interface {
	Listen(ctx context.Context, opts ...grpc.CallOption) (Messenger_ListenClient, error)
	Request(ctx context.Context, opts ...grpc.CallOption) (Messenger_RequestClient, error)
	Buckets(ctx context.Context, opts ...grpc.CallOption) (Messenger_BucketsClient, error)
}

type messengerClient struct {
	cc grpc.ClientConnInterface
}

func NewMessengerClient(cc grpc.ClientConnInterface) MessengerClient {
	return &messengerClient{cc}
}

func (c *messengerClient) Listen(ctx context.Context, opts ...grpc.CallOption) (Messenger_ListenClient, error) {
	stream, err := c.cc.NewStream(ctx, &Messenger_ServiceDesc.Streams[0], "/protobufs.Messenger/Listen", opts...)
	if err != nil {
		return nil, err
	}
	x := &messengerListenClient{stream}
	return x, nil
}

type Messenger_ListenClient interface {
	Send(*ProtocolMessage) error
	Recv() (*BandwidthTestAck, error)
	grpc.ClientStream
}

type messengerListenClient struct {
	grpc.ClientStream
}

func (x *messengerListenClient) Send(m *ProtocolMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messengerListenClient) Recv() (*BandwidthTestAck, error) {
	m := new(BandwidthTestAck)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messengerClient) Request(ctx context.Context, opts ...grpc.CallOption) (Messenger_RequestClient, error) {
	stream, err := c.cc.NewStream(ctx, &Messenger_ServiceDesc.Streams[1], "/protobufs.Messenger/Request", opts...)
	if err != nil {
		return nil, err
	}
	x := &messengerRequestClient{stream}
	return x, nil
}

type Messenger_RequestClient interface {
	Send(*ClientRequest) error
	Recv() (*ClientResponse, error)
	grpc.ClientStream
}

type messengerRequestClient struct {
	grpc.ClientStream
}

func (x *messengerRequestClient) Send(m *ClientRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messengerRequestClient) Recv() (*ClientResponse, error) {
	m := new(ClientResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messengerClient) Buckets(ctx context.Context, opts ...grpc.CallOption) (Messenger_BucketsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Messenger_ServiceDesc.Streams[2], "/protobufs.Messenger/Buckets", opts...)
	if err != nil {
		return nil, err
	}
	x := &messengerBucketsClient{stream}
	return x, nil
}

type Messenger_BucketsClient interface {
	Send(*BucketSubscription) error
	Recv() (*BucketAssignment, error)
	grpc.ClientStream
}

type messengerBucketsClient struct {
	grpc.ClientStream
}

func (x *messengerBucketsClient) Send(m *BucketSubscription) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messengerBucketsClient) Recv() (*BucketAssignment, error) {
	m := new(BucketAssignment)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MessengerServer is the server API for Messenger service.
// All implementations must embed UnimplementedMessengerServer
// for forward compatibility
type MessengerServer interface {
	Listen(Messenger_ListenServer) error
	Request(Messenger_RequestServer) error
	Buckets(Messenger_BucketsServer) error
	mustEmbedUnimplementedMessengerServer()
}

// UnimplementedMessengerServer must be embedded to have forward compatible implementations.
type UnimplementedMessengerServer struct {
}

func (UnimplementedMessengerServer) Listen(Messenger_ListenServer) error {
	return status.Errorf(codes.Unimplemented, "method Listen not implemented")
}
func (UnimplementedMessengerServer) Request(Messenger_RequestServer) error {
	return status.Errorf(codes.Unimplemented, "method Request not implemented")
}
func (UnimplementedMessengerServer) Buckets(Messenger_BucketsServer) error {
	return status.Errorf(codes.Unimplemented, "method Buckets not implemented")
}
func (UnimplementedMessengerServer) mustEmbedUnimplementedMessengerServer() {}

// UnsafeMessengerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessengerServer will
// result in compilation errors.
type UnsafeMessengerServer interface {
	mustEmbedUnimplementedMessengerServer()
}

func RegisterMessengerServer(s grpc.ServiceRegistrar, srv MessengerServer) {
	s.RegisterService(&Messenger_ServiceDesc, srv)
}

func _Messenger_Listen_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessengerServer).Listen(&messengerListenServer{stream})
}

type Messenger_ListenServer interface {
	Send(*BandwidthTestAck) error
	Recv() (*ProtocolMessage, error)
	grpc.ServerStream
}

type messengerListenServer struct {
	grpc.ServerStream
}

func (x *messengerListenServer) Send(m *BandwidthTestAck) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messengerListenServer) Recv() (*ProtocolMessage, error) {
	m := new(ProtocolMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Messenger_Request_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessengerServer).Request(&messengerRequestServer{stream})
}

type Messenger_RequestServer interface {
	Send(*ClientResponse) error
	Recv() (*ClientRequest, error)
	grpc.ServerStream
}

type messengerRequestServer struct {
	grpc.ServerStream
}

func (x *messengerRequestServer) Send(m *ClientResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messengerRequestServer) Recv() (*ClientRequest, error) {
	m := new(ClientRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Messenger_Buckets_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessengerServer).Buckets(&messengerBucketsServer{stream})
}

type Messenger_BucketsServer interface {
	Send(*BucketAssignment) error
	Recv() (*BucketSubscription, error)
	grpc.ServerStream
}

type messengerBucketsServer struct {
	grpc.ServerStream
}

func (x *messengerBucketsServer) Send(m *BucketAssignment) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messengerBucketsServer) Recv() (*BucketSubscription, error) {
	m := new(BucketSubscription)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Messenger_ServiceDesc is the grpc.ServiceDesc for Messenger service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Messenger_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobufs.Messenger",
	HandlerType: (*MessengerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Listen",
			Handler:       _Messenger_Listen_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Request",
			Handler:       _Messenger_Request_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Buckets",
			Handler:       _Messenger_Buckets_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "messenger.proto",
}
