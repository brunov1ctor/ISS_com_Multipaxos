// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v5.27.2
// source: multipaxosorderer.proto

package protobufs

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MPxInstanceId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sn     int32 `protobuf:"varint,1,opt,name=sn,proto3" json:"sn,omitempty"`         // sequence number do segmento
	Bucket int32 `protobuf:"varint,2,opt,name=bucket,proto3" json:"bucket,omitempty"` // opcional: bucket/shard
}

func (x *MPxInstanceId) Reset() {
	*x = MPxInstanceId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_multipaxosorderer_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MPxInstanceId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MPxInstanceId) ProtoMessage() {}

func (x *MPxInstanceId) ProtoReflect() protoreflect.Message {
	mi := &file_multipaxosorderer_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MPxInstanceId.ProtoReflect.Descriptor instead.
func (*MPxInstanceId) Descriptor() ([]byte, []int) {
	return file_multipaxosorderer_proto_rawDescGZIP(), []int{0}
}

func (x *MPxInstanceId) GetSn() int32 {
	if x != nil {
		return x.Sn
	}
	return 0
}

func (x *MPxInstanceId) GetBucket() int32 {
	if x != nil {
		return x.Bucket
	}
	return 0
}

type MPxValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     *MPxInstanceId `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Batch  []byte         `protobuf:"bytes,2,opt,name=batch,proto3" json:"batch,omitempty"`   // payload agregado (batch serializado)
	Digest []byte         `protobuf:"bytes,3,opt,name=digest,proto3" json:"digest,omitempty"` // hash do batch (ex.: sha256)
}

func (x *MPxValue) Reset() {
	*x = MPxValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_multipaxosorderer_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MPxValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MPxValue) ProtoMessage() {}

func (x *MPxValue) ProtoReflect() protoreflect.Message {
	mi := &file_multipaxosorderer_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MPxValue.ProtoReflect.Descriptor instead.
func (*MPxValue) Descriptor() ([]byte, []int) {
	return file_multipaxosorderer_proto_rawDescGZIP(), []int{1}
}

func (x *MPxValue) GetId() *MPxInstanceId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MPxValue) GetBatch() []byte {
	if x != nil {
		return x.Batch
	}
	return nil
}

func (x *MPxValue) GetDigest() []byte {
	if x != nil {
		return x.Digest
	}
	return nil
}

type MPxPrepare struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     *MPxInstanceId `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Ballot uint64         `protobuf:"varint,2,opt,name=ballot,proto3" json:"ballot,omitempty"`
}

func (x *MPxPrepare) Reset() {
	*x = MPxPrepare{}
	if protoimpl.UnsafeEnabled {
		mi := &file_multipaxosorderer_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MPxPrepare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MPxPrepare) ProtoMessage() {}

func (x *MPxPrepare) ProtoReflect() protoreflect.Message {
	mi := &file_multipaxosorderer_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MPxPrepare.ProtoReflect.Descriptor instead.
func (*MPxPrepare) Descriptor() ([]byte, []int) {
	return file_multipaxosorderer_proto_rawDescGZIP(), []int{2}
}

func (x *MPxPrepare) GetId() *MPxInstanceId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MPxPrepare) GetBallot() uint64 {
	if x != nil {
		return x.Ballot
	}
	return 0
}

type MPxPromise struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          *MPxInstanceId `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Ballot      uint64         `protobuf:"varint,2,opt,name=ballot,proto3" json:"ballot,omitempty"`
	HasAccepted bool           `protobuf:"varint,3,opt,name=hasAccepted,proto3" json:"hasAccepted,omitempty"`
	AccBallot   uint64         `protobuf:"varint,4,opt,name=acc_ballot,json=accBallot,proto3" json:"acc_ballot,omitempty"`
	AccValue    *MPxValue      `protobuf:"bytes,5,opt,name=acc_value,json=accValue,proto3" json:"acc_value,omitempty"`
}

func (x *MPxPromise) Reset() {
	*x = MPxPromise{}
	if protoimpl.UnsafeEnabled {
		mi := &file_multipaxosorderer_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MPxPromise) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MPxPromise) ProtoMessage() {}

func (x *MPxPromise) ProtoReflect() protoreflect.Message {
	mi := &file_multipaxosorderer_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MPxPromise.ProtoReflect.Descriptor instead.
func (*MPxPromise) Descriptor() ([]byte, []int) {
	return file_multipaxosorderer_proto_rawDescGZIP(), []int{3}
}

func (x *MPxPromise) GetId() *MPxInstanceId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MPxPromise) GetBallot() uint64 {
	if x != nil {
		return x.Ballot
	}
	return 0
}

func (x *MPxPromise) GetHasAccepted() bool {
	if x != nil {
		return x.HasAccepted
	}
	return false
}

func (x *MPxPromise) GetAccBallot() uint64 {
	if x != nil {
		return x.AccBallot
	}
	return 0
}

func (x *MPxPromise) GetAccValue() *MPxValue {
	if x != nil {
		return x.AccValue
	}
	return nil
}

type MPxAccept struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     *MPxInstanceId `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Ballot uint64         `protobuf:"varint,2,opt,name=ballot,proto3" json:"ballot,omitempty"`
	Value  *MPxValue      `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *MPxAccept) Reset() {
	*x = MPxAccept{}
	if protoimpl.UnsafeEnabled {
		mi := &file_multipaxosorderer_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MPxAccept) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MPxAccept) ProtoMessage() {}

func (x *MPxAccept) ProtoReflect() protoreflect.Message {
	mi := &file_multipaxosorderer_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MPxAccept.ProtoReflect.Descriptor instead.
func (*MPxAccept) Descriptor() ([]byte, []int) {
	return file_multipaxosorderer_proto_rawDescGZIP(), []int{4}
}

func (x *MPxAccept) GetId() *MPxInstanceId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MPxAccept) GetBallot() uint64 {
	if x != nil {
		return x.Ballot
	}
	return 0
}

func (x *MPxAccept) GetValue() *MPxValue {
	if x != nil {
		return x.Value
	}
	return nil
}

type MPxAccepted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     *MPxInstanceId `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Ballot uint64         `protobuf:"varint,2,opt,name=ballot,proto3" json:"ballot,omitempty"`
}

func (x *MPxAccepted) Reset() {
	*x = MPxAccepted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_multipaxosorderer_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MPxAccepted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MPxAccepted) ProtoMessage() {}

func (x *MPxAccepted) ProtoReflect() protoreflect.Message {
	mi := &file_multipaxosorderer_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MPxAccepted.ProtoReflect.Descriptor instead.
func (*MPxAccepted) Descriptor() ([]byte, []int) {
	return file_multipaxosorderer_proto_rawDescGZIP(), []int{5}
}

func (x *MPxAccepted) GetId() *MPxInstanceId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MPxAccepted) GetBallot() uint64 {
	if x != nil {
		return x.Ballot
	}
	return 0
}

type MPxCommit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    *MPxInstanceId `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Value *MPxValue      `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *MPxCommit) Reset() {
	*x = MPxCommit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_multipaxosorderer_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MPxCommit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MPxCommit) ProtoMessage() {}

func (x *MPxCommit) ProtoReflect() protoreflect.Message {
	mi := &file_multipaxosorderer_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MPxCommit.ProtoReflect.Descriptor instead.
func (*MPxCommit) Descriptor() ([]byte, []int) {
	return file_multipaxosorderer_proto_rawDescGZIP(), []int{6}
}

func (x *MPxCommit) GetId() *MPxInstanceId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MPxCommit) GetValue() *MPxValue {
	if x != nil {
		return x.Value
	}
	return nil
}

type MPxMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//	*MPxMsg_Prepare
	//	*MPxMsg_Promise
	//	*MPxMsg_Accept
	//	*MPxMsg_Accepted
	//	*MPxMsg_Commit
	Type isMPxMsg_Type `protobuf_oneof:"type"`
}

func (x *MPxMsg) Reset() {
	*x = MPxMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_multipaxosorderer_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MPxMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MPxMsg) ProtoMessage() {}

func (x *MPxMsg) ProtoReflect() protoreflect.Message {
	mi := &file_multipaxosorderer_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MPxMsg.ProtoReflect.Descriptor instead.
func (*MPxMsg) Descriptor() ([]byte, []int) {
	return file_multipaxosorderer_proto_rawDescGZIP(), []int{7}
}

func (m *MPxMsg) GetType() isMPxMsg_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *MPxMsg) GetPrepare() *MPxPrepare {
	if x, ok := x.GetType().(*MPxMsg_Prepare); ok {
		return x.Prepare
	}
	return nil
}

func (x *MPxMsg) GetPromise() *MPxPromise {
	if x, ok := x.GetType().(*MPxMsg_Promise); ok {
		return x.Promise
	}
	return nil
}

func (x *MPxMsg) GetAccept() *MPxAccept {
	if x, ok := x.GetType().(*MPxMsg_Accept); ok {
		return x.Accept
	}
	return nil
}

func (x *MPxMsg) GetAccepted() *MPxAccepted {
	if x, ok := x.GetType().(*MPxMsg_Accepted); ok {
		return x.Accepted
	}
	return nil
}

func (x *MPxMsg) GetCommit() *MPxCommit {
	if x, ok := x.GetType().(*MPxMsg_Commit); ok {
		return x.Commit
	}
	return nil
}

type isMPxMsg_Type interface {
	isMPxMsg_Type()
}

type MPxMsg_Prepare struct {
	Prepare *MPxPrepare `protobuf:"bytes,10,opt,name=prepare,proto3,oneof"`
}

type MPxMsg_Promise struct {
	Promise *MPxPromise `protobuf:"bytes,11,opt,name=promise,proto3,oneof"`
}

type MPxMsg_Accept struct {
	Accept *MPxAccept `protobuf:"bytes,12,opt,name=accept,proto3,oneof"`
}

type MPxMsg_Accepted struct {
	Accepted *MPxAccepted `protobuf:"bytes,13,opt,name=accepted,proto3,oneof"`
}

type MPxMsg_Commit struct {
	Commit *MPxCommit `protobuf:"bytes,14,opt,name=commit,proto3,oneof"`
}

func (*MPxMsg_Prepare) isMPxMsg_Type() {}

func (*MPxMsg_Promise) isMPxMsg_Type() {}

func (*MPxMsg_Accept) isMPxMsg_Type() {}

func (*MPxMsg_Accepted) isMPxMsg_Type() {}

func (*MPxMsg_Commit) isMPxMsg_Type() {}

var File_multipaxosorderer_proto protoreflect.FileDescriptor

var file_multipaxosorderer_proto_rawDesc = []byte{
	0x0a, 0x17, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x78, 0x6f, 0x73, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x73, 0x22, 0x37, 0x0a, 0x0d, 0x4d, 0x50, 0x78, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x73, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x22, 0x62, 0x0a,
	0x08, 0x4d, 0x50, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x28, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x73, 0x2e, 0x4d, 0x50, 0x78, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x62, 0x61, 0x74, 0x63, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x69, 0x67,
	0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73,
	0x74, 0x22, 0x4e, 0x0a, 0x0a, 0x4d, 0x50, 0x78, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x12,
	0x28, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x73, 0x2e, 0x4d, 0x50, 0x78, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x61, 0x6c,
	0x6c, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x62, 0x61, 0x6c, 0x6c, 0x6f,
	0x74, 0x22, 0xc1, 0x01, 0x0a, 0x0a, 0x4d, 0x50, 0x78, 0x50, 0x72, 0x6f, 0x6d, 0x69, 0x73, 0x65,
	0x12, 0x28, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x73, 0x2e, 0x4d, 0x50, 0x78, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x61,
	0x6c, 0x6c, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x62, 0x61, 0x6c, 0x6c,
	0x6f, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x68, 0x61, 0x73, 0x41, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x5f, 0x62, 0x61, 0x6c, 0x6c,
	0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x61, 0x63, 0x63, 0x42, 0x61, 0x6c,
	0x6c, 0x6f, 0x74, 0x12, 0x30, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x73, 0x2e, 0x4d, 0x50, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x61, 0x63, 0x63,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x78, 0x0a, 0x09, 0x4d, 0x50, 0x78, 0x41, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x12, 0x28, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x73, 0x2e, 0x4d, 0x50, 0x78, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x62, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x62, 0x61,
	0x6c, 0x6c, 0x6f, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x73, 0x2e,
	0x4d, 0x50, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x4f, 0x0a, 0x0b, 0x4d, 0x50, 0x78, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x12, 0x28,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x73, 0x2e, 0x4d, 0x50, 0x78, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x61, 0x6c, 0x6c,
	0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x62, 0x61, 0x6c, 0x6c, 0x6f, 0x74,
	0x22, 0x60, 0x0a, 0x09, 0x4d, 0x50, 0x78, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x28, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x73, 0x2e, 0x4d, 0x50, 0x78, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x73, 0x2e, 0x4d, 0x50, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x8c, 0x02, 0x0a, 0x06, 0x4d, 0x50, 0x78, 0x4d, 0x73, 0x67, 0x12, 0x31, 0x0a,
	0x07, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x73, 0x2e, 0x4d, 0x50, 0x78, 0x50, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x65, 0x48, 0x00, 0x52, 0x07, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65,
	0x12, 0x31, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6d, 0x69, 0x73, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x73, 0x2e, 0x4d, 0x50,
	0x78, 0x50, 0x72, 0x6f, 0x6d, 0x69, 0x73, 0x65, 0x48, 0x00, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6d,
	0x69, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x73, 0x2e,
	0x4d, 0x50, 0x78, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x06, 0x61, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x12, 0x34, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x73, 0x2e, 0x4d, 0x50, 0x78, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52,
	0x08, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x06, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x73, 0x2e, 0x4d, 0x50, 0x78, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x48,
	0x00, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x42, 0x0e, 0x5a, 0x0c, 0x2e, 0x2f, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_multipaxosorderer_proto_rawDescOnce sync.Once
	file_multipaxosorderer_proto_rawDescData = file_multipaxosorderer_proto_rawDesc
)

func file_multipaxosorderer_proto_rawDescGZIP() []byte {
	file_multipaxosorderer_proto_rawDescOnce.Do(func() {
		file_multipaxosorderer_proto_rawDescData = protoimpl.X.CompressGZIP(file_multipaxosorderer_proto_rawDescData)
	})
	return file_multipaxosorderer_proto_rawDescData
}

var file_multipaxosorderer_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_multipaxosorderer_proto_goTypes = []interface{}{
	(*MPxInstanceId)(nil), // 0: protobufs.MPxInstanceId
	(*MPxValue)(nil),      // 1: protobufs.MPxValue
	(*MPxPrepare)(nil),    // 2: protobufs.MPxPrepare
	(*MPxPromise)(nil),    // 3: protobufs.MPxPromise
	(*MPxAccept)(nil),     // 4: protobufs.MPxAccept
	(*MPxAccepted)(nil),   // 5: protobufs.MPxAccepted
	(*MPxCommit)(nil),     // 6: protobufs.MPxCommit
	(*MPxMsg)(nil),        // 7: protobufs.MPxMsg
}
var file_multipaxosorderer_proto_depIdxs = []int32{
	0,  // 0: protobufs.MPxValue.id:type_name -> protobufs.MPxInstanceId
	0,  // 1: protobufs.MPxPrepare.id:type_name -> protobufs.MPxInstanceId
	0,  // 2: protobufs.MPxPromise.id:type_name -> protobufs.MPxInstanceId
	1,  // 3: protobufs.MPxPromise.acc_value:type_name -> protobufs.MPxValue
	0,  // 4: protobufs.MPxAccept.id:type_name -> protobufs.MPxInstanceId
	1,  // 5: protobufs.MPxAccept.value:type_name -> protobufs.MPxValue
	0,  // 6: protobufs.MPxAccepted.id:type_name -> protobufs.MPxInstanceId
	0,  // 7: protobufs.MPxCommit.id:type_name -> protobufs.MPxInstanceId
	1,  // 8: protobufs.MPxCommit.value:type_name -> protobufs.MPxValue
	2,  // 9: protobufs.MPxMsg.prepare:type_name -> protobufs.MPxPrepare
	3,  // 10: protobufs.MPxMsg.promise:type_name -> protobufs.MPxPromise
	4,  // 11: protobufs.MPxMsg.accept:type_name -> protobufs.MPxAccept
	5,  // 12: protobufs.MPxMsg.accepted:type_name -> protobufs.MPxAccepted
	6,  // 13: protobufs.MPxMsg.commit:type_name -> protobufs.MPxCommit
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_multipaxosorderer_proto_init() }
func file_multipaxosorderer_proto_init() {
	if File_multipaxosorderer_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_multipaxosorderer_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MPxInstanceId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_multipaxosorderer_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MPxValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_multipaxosorderer_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MPxPrepare); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_multipaxosorderer_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MPxPromise); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_multipaxosorderer_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MPxAccept); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_multipaxosorderer_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MPxAccepted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_multipaxosorderer_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MPxCommit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_multipaxosorderer_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MPxMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_multipaxosorderer_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*MPxMsg_Prepare)(nil),
		(*MPxMsg_Promise)(nil),
		(*MPxMsg_Accept)(nil),
		(*MPxMsg_Accepted)(nil),
		(*MPxMsg_Commit)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_multipaxosorderer_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_multipaxosorderer_proto_goTypes,
		DependencyIndexes: file_multipaxosorderer_proto_depIdxs,
		MessageInfos:      file_multipaxosorderer_proto_msgTypes,
	}.Build()
	File_multipaxosorderer_proto = out.File
	file_multipaxosorderer_proto_rawDesc = nil
	file_multipaxosorderer_proto_goTypes = nil
	file_multipaxosorderer_proto_depIdxs = nil
}
